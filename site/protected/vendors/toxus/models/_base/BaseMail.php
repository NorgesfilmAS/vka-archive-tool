<?php

/**
 * This is the model base class for the table "mail".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Mail".
 *
 * Columns in table "mail" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property integer $profile_id
 * @property string $to
 * @property string $creation_date
 * @property string $message
 * @property string $log
 * @property string $html_message
 * @property string $from_address
 * @property string $to_address
 * @property string $reply_to
 * @property string $subject
 * @property string $message_id
 * @property string $error_code
 * @property string $error_curl
 * @property string $bounce_json
 * @property integer $is_bounced
 * @property string $open_json
 * @property integer $is_inbound
 * @property string $inbound_json
 * @property string $spam_status
 * @property string $spam_score
 * @property string $spam_tests
 * @property integer $is_reply_text
 *
 */
abstract class BaseMail extends TwigActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'mail';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Mail|Mails', $n);
	}

	public static function representingColumn() {
		return 'to';
	}

	public function rules() {
		return array(
			array('profile_id, is_bounced, is_inbound, is_reply_text', 'numerical', 'integerOnly'=>true),
			array('to, from_address, to_address, reply_to, subject, message_id, error_code, error_curl', 'length', 'max'=>255),
			array('creation_date, message, log, html_message, bounce_json, open_json, inbound_json, spam_status, spam_score, spam_tests', 'safe'),
			array('profile_id, to, creation_date, message, log, html_message, from_address, to_address, reply_to, subject, message_id, error_code, error_curl, bounce_json, is_bounced, open_json, is_inbound, inbound_json, spam_status, spam_score, spam_tests, is_reply_text', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, profile_id, to, creation_date, message, log, html_message, from_address, to_address, reply_to, subject, message_id, error_code, error_curl, bounce_json, is_bounced, open_json, is_inbound, inbound_json, spam_status, spam_score, spam_tests, is_reply_text', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'profile_id' => Yii::t('app', 'Profile'),
			'to' => Yii::t('app', 'To'),
			'creation_date' => Yii::t('app', 'Creation Date'),
			'message' => Yii::t('app', 'Message'),
			'log' => Yii::t('app', 'Log'),
			'html_message' => Yii::t('app', 'Html Message'),
			'from_address' => Yii::t('app', 'From Address'),
			'to_address' => Yii::t('app', 'To Address'),
			'reply_to' => Yii::t('app', 'Reply To'),
			'subject' => Yii::t('app', 'Subject'),
			'message_id' => Yii::t('app', 'Message'),
			'error_code' => Yii::t('app', 'Error Code'),
			'error_curl' => Yii::t('app', 'Error Curl'),
			'bounce_json' => Yii::t('app', 'Bounce Json'),
			'is_bounced' => Yii::t('app', 'Is Bounced'),
			'open_json' => Yii::t('app', 'Open Json'),
			'is_inbound' => Yii::t('app', 'Is Inbound'),
			'inbound_json' => Yii::t('app', 'Inbound Json'),
			'spam_status' => Yii::t('app', 'Spam Status'),
			'spam_score' => Yii::t('app', 'Spam Score'),
			'spam_tests' => Yii::t('app', 'Spam Tests'),
			'is_reply_text' => Yii::t('app', 'Is Reply Text'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('profile_id', $this->profile_id);
		$criteria->compare('to', $this->to, true);
		$criteria->compare('creation_date', $this->creation_date, true);
		$criteria->compare('message', $this->message, true);
		$criteria->compare('log', $this->log, true);
		$criteria->compare('html_message', $this->html_message, true);
		$criteria->compare('from_address', $this->from_address, true);
		$criteria->compare('to_address', $this->to_address, true);
		$criteria->compare('reply_to', $this->reply_to, true);
		$criteria->compare('subject', $this->subject, true);
		$criteria->compare('message_id', $this->message_id, true);
		$criteria->compare('error_code', $this->error_code, true);
		$criteria->compare('error_curl', $this->error_curl, true);
		$criteria->compare('bounce_json', $this->bounce_json, true);
		$criteria->compare('is_bounced', $this->is_bounced);
		$criteria->compare('open_json', $this->open_json, true);
		$criteria->compare('is_inbound', $this->is_inbound);
		$criteria->compare('inbound_json', $this->inbound_json, true);
		$criteria->compare('spam_status', $this->spam_status, true);
		$criteria->compare('spam_score', $this->spam_score, true);
		$criteria->compare('spam_tests', $this->spam_tests, true);
		$criteria->compare('is_reply_text', $this->is_reply_text);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}
