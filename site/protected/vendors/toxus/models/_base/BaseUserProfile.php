<?php

/**
 * This is the model base class for the table "user_profile".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "UserProfile".
 *
 * Columns in table "user_profile" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $username
 * @property string $password
 * @property string $password_md5
 * @property string $login_key
 * @property string $email
 * @property string $email_to_confirm
 * @property integer $is_confirmed
 * @property integer $rights_id
 * @property string $creation_date
 * @property string $modified_date
 * @property string $last_login
 * @property integer $has_newsletter
 * @property integer $is_suspended
 * @property string $newsletter_key
 * @property integer $accepted_terms
 *
 */
abstract class BaseUserProfile extends TwigActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'user_profile';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'UserProfile|UserProfiles', $n);
	}

	public static function representingColumn() {
		return 'username';
	}

	public function rules() {
		return array(
			array('username, password, email', 'required'),
			array('is_confirmed, rights_id, has_newsletter, is_suspended, accepted_terms', 'numerical', 'integerOnly'=>true),
			array('username, password, password_md5, login_key, email, email_to_confirm, newsletter_key', 'length', 'max'=>255),
			array('creation_date, modified_date, last_login', 'safe'),
			array('password_md5, login_key, email_to_confirm, is_confirmed, rights_id, creation_date, modified_date, last_login, has_newsletter, is_suspended, newsletter_key, accepted_terms', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, username, password, password_md5, login_key, email, email_to_confirm, is_confirmed, rights_id, creation_date, modified_date, last_login, has_newsletter, is_suspended, newsletter_key, accepted_terms', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'username' => Yii::t('app', 'Username'),
			'password' => Yii::t('app', 'Password'),
			'password_md5' => Yii::t('app', 'Password Md5'),
			'login_key' => Yii::t('app', 'Login Key'),
			'email' => Yii::t('app', 'Email'),
			'email_to_confirm' => Yii::t('app', 'Email To Confirm'),
			'is_confirmed' => Yii::t('app', 'Is Confirmed'),
			'rights_id' => Yii::t('app', 'Rights'),
			'creation_date' => Yii::t('app', 'Creation Date'),
			'modified_date' => Yii::t('app', 'Modified Date'),
			'last_login' => Yii::t('app', 'Last Login'),
			'has_newsletter' => Yii::t('app', 'Has Newsletter'),
			'is_suspended' => Yii::t('app', 'Is Suspended'),
			'newsletter_key' => Yii::t('app', 'Newsletter Key'),
			'accepted_terms' => Yii::t('app', 'Accepted Terms'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('password_md5', $this->password_md5, true);
		$criteria->compare('login_key', $this->login_key, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('email_to_confirm', $this->email_to_confirm, true);
		$criteria->compare('is_confirmed', $this->is_confirmed);
		$criteria->compare('rights_id', $this->rights_id);
		$criteria->compare('creation_date', $this->creation_date, true);
		$criteria->compare('modified_date', $this->modified_date, true);
		$criteria->compare('last_login', $this->last_login, true);
		$criteria->compare('has_newsletter', $this->has_newsletter);
		$criteria->compare('is_suspended', $this->is_suspended);
		$criteria->compare('newsletter_key', $this->newsletter_key, true);
		$criteria->compare('accepted_terms', $this->accepted_terms);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}
