<?php

/**
 * This is the model base class for the table "preview_size".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "PreviewSize".
 *
 * Columns in table "preview_size" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $ref
 * @property string $id
 * @property integer $width
 * @property integer $height
 * @property integer $padtosize
 * @property string $name
 * @property integer $internal
 * @property integer $allow_preview
 * @property integer $allow_restricted
 *
 */
abstract class BasePreviewSize extends GxActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'preview_size';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'PreviewSize|PreviewSizes', $n);
	}

	public static function representingColumn() {
		return 'id';
	}

	public function rules() {
		return array(
			array('width, height, padtosize, internal, allow_preview, allow_restricted', 'numerical', 'integerOnly'=>true),
			array('id', 'length', 'max'=>3),
			array('name', 'length', 'max'=>50),
			array('id, width, height, padtosize, name, internal, allow_preview, allow_restricted', 'default', 'setOnEmpty' => true, 'value' => null),
			array('ref, id, width, height, padtosize, name, internal, allow_preview, allow_restricted', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'ref' => Yii::t('app', 'Ref'),
			'id' => Yii::t('app', 'ID'),
			'width' => Yii::t('app', 'Width'),
			'height' => Yii::t('app', 'Height'),
			'padtosize' => Yii::t('app', 'Padtosize'),
			'name' => Yii::t('app', 'Name'),
			'internal' => Yii::t('app', 'Internal'),
			'allow_preview' => Yii::t('app', 'Allow Preview'),
			'allow_restricted' => Yii::t('app', 'Allow Restricted'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('ref', $this->ref);
		$criteria->compare('id', $this->id, true);
		$criteria->compare('width', $this->width);
		$criteria->compare('height', $this->height);
		$criteria->compare('padtosize', $this->padtosize);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('internal', $this->internal);
		$criteria->compare('allow_preview', $this->allow_preview);
		$criteria->compare('allow_restricted', $this->allow_restricted);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}
