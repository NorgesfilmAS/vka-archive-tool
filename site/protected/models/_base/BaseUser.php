<?php

/**
 * This is the model base class for the table "user".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "User".
 *
 * Columns in table "user" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $ref
 * @property string $username
 * @property string $password
 * @property string $fullname
 * @property string $email
 * @property integer $usergroup
 * @property string $last_active
 * @property integer $logged_in
 * @property string $last_browser
 * @property string $last_ip
 * @property integer $current_collection
 * @property integer $accepted_terms
 * @property string $account_expires
 * @property string $comments
 * @property string $session
 * @property string $ip_restrict
 * @property string $password_last_change
 * @property integer $login_tries
 * @property string $login_last_try
 * @property integer $approved
 * @property string $lang
 * @property string $created
 * @property string $activation_key
 * @property string $telephone
 * @property string $address
 *
 */
abstract class BaseUser extends TwigActiveRecord {

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'user';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'User|Users', $n);
	}

	public static function representingColumn() {
		return 'created';
	}

	public function rules() {
		return array(
			array('created', 'required'),
			array('usergroup, logged_in, current_collection, accepted_terms, login_tries, approved', 'numerical', 'integerOnly'=>true),
			array('username, password, session', 'length', 'max'=>50),
			array('fullname, email, last_ip', 'length', 'max'=>100),
			array('lang', 'length', 'max'=>11),
			array('activation_key, telephone', 'length', 'max'=>255),
			array('last_active, last_browser, account_expires, comments, ip_restrict, password_last_change, login_last_try, address', 'safe'),
			array('username, password, fullname, email, usergroup, last_active, logged_in, last_browser, last_ip, current_collection, accepted_terms, account_expires, comments, session, ip_restrict, password_last_change, login_tries, login_last_try, approved, lang, activation_key, telephone, address', 'default', 'setOnEmpty' => true, 'value' => null),
			array('ref, username, password, fullname, email, usergroup, last_active, logged_in, last_browser, last_ip, current_collection, accepted_terms, account_expires, comments, session, ip_restrict, password_last_change, login_tries, login_last_try, approved, lang, created, activation_key, telephone, address', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'ref' => Yii::t('app', 'Ref'),
			'username' => Yii::t('app', 'Username'),
			'password' => Yii::t('app', 'Password'),
			'fullname' => Yii::t('app', 'Fullname'),
			'email' => Yii::t('app', 'Email'),
			'usergroup' => Yii::t('app', 'Usergroup'),
			'last_active' => Yii::t('app', 'Last Active'),
			'logged_in' => Yii::t('app', 'Logged In'),
			'last_browser' => Yii::t('app', 'Last Browser'),
			'last_ip' => Yii::t('app', 'Last Ip'),
			'current_collection' => Yii::t('app', 'Current Collection'),
			'accepted_terms' => Yii::t('app', 'Accepted Terms'),
			'account_expires' => Yii::t('app', 'Account Expires'),
			'comments' => Yii::t('app', 'Comments'),
			'session' => Yii::t('app', 'Session'),
			'ip_restrict' => Yii::t('app', 'Ip Restrict'),
			'password_last_change' => Yii::t('app', 'Password Last Change'),
			'login_tries' => Yii::t('app', 'Login Tries'),
			'login_last_try' => Yii::t('app', 'Login Last Try'),
			'approved' => Yii::t('app', 'Approved'),
			'lang' => Yii::t('app', 'Lang'),
			'created' => Yii::t('app', 'Created'),
			'activation_key' => Yii::t('app', 'Activation Key'),
			'telephone' => Yii::t('app', 'Telephone'),
			'address' => Yii::t('app', 'Address'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('ref', $this->ref);
		$criteria->compare('username', $this->username, true);
		$criteria->compare('password', $this->password, true);
		$criteria->compare('fullname', $this->fullname, true);
		$criteria->compare('email', $this->email, true);
		$criteria->compare('usergroup', $this->usergroup);
		$criteria->compare('last_active', $this->last_active, true);
		$criteria->compare('logged_in', $this->logged_in);
		$criteria->compare('last_browser', $this->last_browser, true);
		$criteria->compare('last_ip', $this->last_ip, true);
		$criteria->compare('current_collection', $this->current_collection);
		$criteria->compare('accepted_terms', $this->accepted_terms);
		$criteria->compare('account_expires', $this->account_expires, true);
		$criteria->compare('comments', $this->comments, true);
		$criteria->compare('session', $this->session, true);
		$criteria->compare('ip_restrict', $this->ip_restrict, true);
		$criteria->compare('password_last_change', $this->password_last_change, true);
		$criteria->compare('login_tries', $this->login_tries);
		$criteria->compare('login_last_try', $this->login_last_try, true);
		$criteria->compare('approved', $this->approved);
		$criteria->compare('lang', $this->lang, true);
		$criteria->compare('created', $this->created, true);
		$criteria->compare('activation_key', $this->activation_key, true);
		$criteria->compare('telephone', $this->telephone, true);
		$criteria->compare('address', $this->address, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}
}
